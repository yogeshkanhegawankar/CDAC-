enum
   enumeration
   it is set of fixed values
   predefined values
  started from java 1.5 version
  these are the constants, need to write in upper case
  to access we use "."
  eg : colors : red , green , blue
  eg : dname : accounting, fin, mkt, admin
  eg : months, seasons, weekdays


========================
Reflection
  it is an API which  used to modify the behaviour of the methods, classes, interfaces at runtime

using Reflection we can see name of class, names of all the methods, all the mv names, 
names of my  costructors, execute all the mf, access private methods

 the package used is java.lang.reflect
 it is not advisible to use this api

Test
	s  //mv	
	cost : def
	cost : para
	public void method1()
	public void method2(int n) 
	private void method3() 

-----------------------------------------------------------------------------------
OOP 
Abstraction
  hiding  details	: using private access specifier
  Reflection is violating the rules of OOP , 
    it is not advisible to use .


=================
Date api
Java provides the Date class available in java.util package, this class encapsulates the current date and time.
started from java 8 version

--classes used

import java.util.Calendar;
import java.util.TimeZone;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;

import java.util.Date;
import java.text.*;
SimpleDateFormat   class in    java.text package 

==================================

Character Description Example
G Era designator AD
y Year in four digits 2001
M Month in year July or 07
d Day in month 10
h Hour in A.M./P.M. (1~12) 12
			time is 12:50
			display the day of the yr  
			display 26 October 23 
 
H Hour in day (0~23) 22
m Minute in hour 30
s Second in minute 55
S Millisecond 234
E Day in week Tuesday
D Day in year 365
F Day of week in month 2 (second Wed. in July)
w Week in year 40
W Week in month 1
a A.M./P.M. marker PM
k Hour in day (1~24) 24
K Hour in A.M./P.M. (0~11) 10
z Time zone Eastern Standard Time
' Escape for text Delimiter
" Single quote `

================
Date and Time Conversion Characters
Character Description Example
c Complete date and time Mon May 04 09:51:52 CDT 2009
F ISO 8601 date 2004-02-09
D U.S. formatted date (month/day/year) 02/09/2004
T 24-hour time 18:05:19
r 12-hour time 06:05:19 pm
R 24-hour time, no seconds 18:05
Y Four-digit year (with leading zeroes) 2004
y Last two digits of the year (with leading zeroes) 04
C First two digits of the year (with leading zeroes) 20
B Full month name February
b Abbreviated month name Feb
m Two-digit month (with leading zeroes) 02
d Two-digit day (with leading zeroes) 03
e Two-digit day (without leading zeroes) 9
A Full weekday name Monday
a Abbreviated weekday name Mon
j Three-digit day of year (with leading zeroes) 069
H Two-digit hour (with leading zeroes), between 00 and 23 18
k Two-digit hour (without leading zeroes), between 0 and 23 18
I Two-digit hour (with leading zeroes), between 01 and 12 06
l Two-digit hour (without leading zeroes), between 1 and 12 6
M Two-digit minutes (with leading zeroes) 05
S Two-digit seconds (with leading zeroes) 19
L Three-digit milliseconds (with leading zeroes) 047
N Nine-digit nanoseconds (with leading zeroes) 047000000
P Uppercase morning or afternoon marker PM
p Lowercase morning or afternoon marker pm
z RFC 822 numeric offset from GMT -0800
Z Time zone PST
s Seconds since 1970-01-01 00:00:00 GMT 1078884319
Q Milliseconds since 1970-01-01 00:00:00 GMT 1078884319047

============
lambda expression
  enables functional programming   
  parallel processing is supported 
  this is a new feature in java 1.8

--why lambda 
code is less and concise











